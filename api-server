#!/usr/bin/env ruby
#encoding: utf-8

require 'yaml'
require 'active_record'
require 'logger'
require 'digest/md5'

require 'uri'
require 'multi_json'

require 'sinatra'


=begin 
=================================================================
	读取配置文件
=================================================================
=end

$config = YAML.load_file 'api-server.yml'
server_conf = $config['server']
host = server_conf['host']
port = server_conf['port']

=begin
================================================================
	建立数据库连接
=================================================================
=end

logstdout = Logger.new STDERR

class RankUrl		< ActiveRecord::Base; end
class RankLanguage	< ActiveRecord::Base; end
class RankUseragent	< ActiveRecord::Base; end
ActiveRecord::Base.establish_connection $config['realtime_database']
ActiveRecord::Base.logger = logstdout

MD5_PREFIX = 'log-server-md5-prefix'

def get_md5_str *items
	digest = Digest::MD5.new
	digest << MD5_PREFIX
	items.each do |o|
		digest << '-'
		digest << o
	end
	digest.hexdigest
end

def get_language language_id
	dim = DimLanguage.find language_id, :select=>'pri,sub'
	return "#{dim.pri}-#{dim.sub}" if dim
	'(not set)'
end

def get_browser browser_id
	dim = DimBrowser.find browser_id, :select=>'mobile,platform,browser'
	return [dim.mobile,dim.platform,dim.browser] if dim
	[false, '(not set)', '(not set)']
end

def get_machine_id token, hardware
	md5_str = get_md5_str token, hardware
	dim = DimMachine.find_by_md5 md5_str, :select=>'id'
	return dim.id if dim

	new_dim = DimMachine.create! :token_key=>token, :hardware_key=>hardware, :md5=>md5_str
	new_dim.id
end

def get_requesturi uri_id
	dim = DimRequesturi.find uri_id, :select=>'request_uri'
	return dim.request_uri if dim
	'null'
end

def get_line_chart step,count,token,hardware
	machine_id = get_machine_id token,hardware

	result = {}
	result['step'] = step
	result['count'] = count
	result['token'] = token
	result['hardware'] = hardware
	MultiJson.dump result
end

def get_list_chart type,count,token,hardware

	result = {}
	result['type'] = type
	result['count'] = count
	result['token'] = token
	result['hardware'] = hardware
	MultiJson.dump result
end

def get_pie_chart type,piece,token,hardware
	result = {}
	result['type'] = type
	result['piece'] = piece
	result['token'] = token
	result['hardware'] = hardware
	MultiJson.dump result
end

=begin 
=================================================================
	sinatra
=================================================================
=end

#配置服务器
set :bind, host
set :port, port
set :root, File.dirname(__FILE__)
set :app_file, __FILE__
#set :sessions, true
#set :public_folder, Proc.new { File.join(root, "static") }
#set :views, Proc.new { File.join(root, "templates") }
#set :environment, :production

get '/api/line/:step/:count/:token/:hardware' do
	get_line_chart  params[:step],params[:count],params[:token],params[:hardware]
end

get '/api/list/:type/:count/:token/:hardware' do
	get_list_chart params[:type],params[:count],params[:token],params[:hardware]
end

get '/api/pie/:type/:piece/:token/:hardware' do
	get_pie_chart params[:type],params[:piece],params[:token],params[:hardware]
end

